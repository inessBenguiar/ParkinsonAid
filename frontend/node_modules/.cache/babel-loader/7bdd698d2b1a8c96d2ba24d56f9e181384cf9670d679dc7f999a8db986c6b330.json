{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zbook\\\\Desktop\\\\ParkinsonAid\\\\frontend\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2'; // Import Bar chart from react-chartjs-2\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarDashboard = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(null); // State to track selected date\n\n  // Mock data for demonstration purposes\n  const mockData = [{\n    date: '2024-09-01',\n    patients: 10,\n    diagnoses: 5\n  }, {\n    date: '2024-09-02',\n    patients: 8,\n    diagnoses: 3\n  }, {\n    date: '2024-09-03',\n    patients: 12,\n    diagnoses: 6\n  }\n  // Add more mock data as needed\n  ];\n\n  // Function to handle date click and set the selected date\n  const handleDateClick = date => {\n    setSelectedDate(date);\n  };\n\n  // Function to generate bar chart data\n  const generateChartData = (patients, diagnoses) => {\n    return {\n      labels: ['Patients', 'Diagnoses'],\n      datasets: [{\n        label: 'Count',\n        data: [patients, diagnoses],\n        backgroundColor: ['#4CAF50', '#FFC107']\n      }]\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard Calendar View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-grid\",\n      children: mockData.map(data => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-day\",\n        onClick: () => handleDateClick(data.date),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: data.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: generateChartData(data.patients, data.diagnoses),\n          options: {\n            responsive: true,\n            maintainAspectRatio: false\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)]\n      }, data.date, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), selectedDate && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detailed-view\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Details for \", selectedDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarDashboard, \"rhrbPH1/NtfhiyDl62tZ0yGffOM=\");\n_c = CalendarDashboard;\nexport default CalendarDashboard;\nvar _c;\n$RefreshReg$(_c, \"CalendarDashboard\");","map":{"version":3,"names":["React","useState","Bar","jsxDEV","_jsxDEV","CalendarDashboard","_s","selectedDate","setSelectedDate","mockData","date","patients","diagnoses","handleDateClick","generateChartData","labels","datasets","label","data","backgroundColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","options","responsive","maintainAspectRatio","_c","$RefreshReg$"],"sources":["C:/Users/Zbook/Desktop/ParkinsonAid/frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2'; // Import Bar chart from react-chartjs-2\r\nimport './Dashboard.css';\r\n\r\nconst CalendarDashboard = () => {\r\n  const [selectedDate, setSelectedDate] = useState(null); // State to track selected date\r\n\r\n  // Mock data for demonstration purposes\r\n  const mockData = [\r\n    { date: '2024-09-01', patients: 10, diagnoses: 5 },\r\n    { date: '2024-09-02', patients: 8, diagnoses: 3 },\r\n    { date: '2024-09-03', patients: 12, diagnoses: 6 },\r\n    // Add more mock data as needed\r\n  ];\r\n\r\n  // Function to handle date click and set the selected date\r\n  const handleDateClick = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  // Function to generate bar chart data\r\n  const generateChartData = (patients, diagnoses) => {\r\n    return {\r\n      labels: ['Patients', 'Diagnoses'],\r\n      datasets: [\r\n        {\r\n          label: 'Count',\r\n          data: [patients, diagnoses],\r\n          backgroundColor: ['#4CAF50', '#FFC107'],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar-dashboard\">\r\n      <h1>Dashboard Calendar View</h1>\r\n      <div className=\"calendar-grid\">\r\n        {mockData.map((data) => (\r\n          <div\r\n            key={data.date}\r\n            className=\"calendar-day\"\r\n            onClick={() => handleDateClick(data.date)}\r\n          >\r\n            <p>{data.date}</p>\r\n            {/* Embed Mini Chart */}\r\n            <Bar data={generateChartData(data.patients, data.diagnoses)} options={{ responsive: true, maintainAspectRatio: false }} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Display Detailed View for Selected Date */}\r\n      {selectedDate && (\r\n        <div className=\"detailed-view\">\r\n          <h2>Details for {selectedDate}</h2>\r\n          {/* Here, you can add more detailed statistics or charts */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarDashboard;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}